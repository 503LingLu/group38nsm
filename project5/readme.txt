步骤：

定义了一个Node类，表示树的节点。每个节点包含一个数据（data）、指向上一个节点的指针（prev）、指向左子节点的指针（leftChild）、指向右子节点的指针（rightChild）和指向兄弟节点的指针（bro）。

定义了height_of_tree函数，用于计算树的高度。根据叶子节点的数量，确定树的层数。

定义了merkle_tree函数，用于生成默克尔树。首先生成一定数量的叶子节点（leaf_blocks），每个叶子节点的数据为随机数。

根据叶子节点生成树的结构。首先确定树的高度（height），然后根据树的高度创建一个二维列表（node_list），用于存储每层的节点。

开始进行哈希计算。根据树的高度逐层计算哈希值。对于每一层的节点，根据其在上一层的位置，计算其左子节点和右子节点的哈希值。将计算得到的哈希值赋给当前节点，并建立节点之间的连接关系。

最后，选择一个随机的叶子节点，计算从该叶子节点到根节点路径上的哈希值。通过逐层计算节点哈希值的方式，最终得到根节点的哈希值。

打印输出结果，包括根节点的哈希值、随机选择的叶子节点、叶子节点的哈希值、计算的哈希值以及验证结果。

在主程序中调用merkle_tree函数，并计算程序执行的时间。