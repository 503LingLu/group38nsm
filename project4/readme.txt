SHA-256算法的流程如下：

对输入的消息进行填充，使其长度符合SHA-256算法要求。
将填充后的消息进行分组，每个分组为512位。
对每个分组进行扩展和压缩操作，得到最终的哈希值。

BinToHex：将二进制字符串转换为十六进制字符串。
HexToBin：将十六进制字符串转换为二进制字符串。
BinToDec：将二进制字符串转换为十进制数。
DecToBin：将十进制数转换为二进制字符串。
HexToDec：将十六进制字符串转换为十进制数。
DecToHex：将十进制数转换为十六进制字符串。
padding：对输入的消息进行填充，使其长度符合SHA-256算法要求。
LeftShift：对输入的字符串进行循环左移操作。
XOR：对两个字符串进行按位异或操作。
AND：对两个字符串进行按位与操作。
OR：对两个字符串进行按位或操作。
NOT：对字符串进行按位取反操作。
ModAdd：对两个十六进制数进行模运算，结果为两数相加后取模2^32的值。
P1：SHA-256算法中使用的变换函数。
P0：SHA-256算法中使用的变换函数。
T：SHA-256算法中使用的常量函数。
FF：SHA-256算法中使用的逻辑函数。
GG：SHA-256算法中使用的逻辑函数。
extension：对输入的消息进行扩展。
compress：对扩展后的消息进行压缩。
iteration：对输入的消息进行迭代压缩。

optimize与SM3.h相比，主要是对消息扩展和消息压缩的过程进行了优化。
在消息扩展方面，原代码使用循环来逐步生成消息扩展的结果。而这段代码通过使用预先计算好的常量和位运算，将循环结构简化成了一次性的操作。具体来说，使用了P1函数和LeftShift函数来实现位运算，将原本需要多次循环的操作合并为一次操作。
在消息压缩方面，原代码使用循环来迭代压缩每个分组的消息。而这段代码通过将循环中的变量赋值操作换成位运算，避免了多余的读取和写入操作。同时，利用预先计算好的常量，减少了多余的计算。
通过这些优化，可以提高代码的执行效率，减少不必要的计算和内存访问，从而加快程序的运行速度。