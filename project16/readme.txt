A:
首先定义了一些参数，包括椭圆曲线的参数和推荐参数。然后定义了一系列辅助函数，用于计算最大公约数、取模运算、勒让德符号、随机数生成等。接下来实现了加密函数sm3_en和解密函数sm3_de，其中加密函数使用了SM3哈希算法进行消息加密，并且使用了椭圆曲线上的点进行加密计算。最后在函数A中实现了整个加密和解密的流程，包括与服务器建立连接、发送和接收数据等。

具体流程如下：

在函数A中，首先定义了要加密的消息msg和加密后的密文C1, C2, C3。
在函数A_1中定义了私钥d1。
在函数A_2中使用私钥d1对密文C1进行解密，得到一个临时的椭圆曲线上的点T1。
将点T1发送给服务器。
接收服务器返回的椭圆曲线上的点T2。
在函数A_4中将密文C2解密得到明文。
打印解密后的明文。

B:
show_points(p, a, b): 根据给定的 p, a, b 值，计算满足椭圆曲线上方程 y^2 = x^3 + ax + b mod p 的所有点。

GCD(a, b): 计算 a 和 b 的最大公约数，使用递归实现。

XGCD(a, b): 扩展欧几里得算法，计算 a 和 b 的最大公约数及其线性组合。

get_inverse(a, b): 计算 a 在模 b 下的逆元。

pow_mod(a, b, n): 计算 a 的 b 次幂再模 n 的结果。

get_miller(m): 获取 m 中的奇数部分。

rabin_miller(p): 判断 p 是否为素数的概率性算法。

get_gcd(x, y): 计算 x 和 y 的最大公约数。

calculate_p_q(x1, y1, x2, y2, a, b, p): 根据 P 和 Q 的坐标，计算 P + Q 的坐标。

calculate_2p(p_x, p_y, a, b, p): 计算 2P 的坐标。

calculate_np(p_x, p_y, n, a, b, p): 计算 nP 的坐标。

calculate_Tp(p_x, p_y, a, b, p): 计算 T = -P 的坐标。

get_key(): 生成椭圆曲线密钥对。

get_bitsize(num): 计算一个数的位数。

int_to_bytes(num): 将一个数转换为字节数组。

bytes_to_int(bytes): 将字节数组转换为一个数。

KDF(z,klen): 密钥派生函数。

sm3_en(msg,P): 使用椭圆曲线加密算法SM3对消息进行加密。

list_to_num(list_n): 将十六进制列表转换为一个数。

sm3_de(ciphertext,d): 使用椭圆曲线加密算法SM3对密文进行解密。

其中，B 函数是 B 用户在密钥交换协议中的角色，首先创建一个服务器，等待与 A 用户建立连接。然后接收 A 发送的 T1 值，通过调用 B_1 和 B_3 函数计算出 T2 值，并将其发送给 A 用户。