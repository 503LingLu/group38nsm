代码说明：
首先定义了一个常量向量IV作为初始值。然后代码实现了一个辅助函数ROTL，用于将一个32位的整数循环左移指定的位数。接下来定义一个辅助函数put_uint32_be，该函数将一个32位的整数按照大端字节序转换成一个长度为4的字节数组。
padding函数对待哈希的消息进行填充。它根据消息的长度计算出需要填充的位数k，并添加了一个0x80字节作为分隔符。然后，根据消息的长度以64位的形式添加到消息的末尾。
xor_op函数实现了异或操作。
sm3_ff_j和sm3_gg_j是SM3算法中的两个布尔函数，用于计算哈希过程中的中间结果。
sm3_p_0和sm3_p_1是置换函数，用于计算哈希过程中的中间结果。
sm3_cf函数是SM3算法中的压缩函数，用于计算每个消息块的哈希值。
sm3_hash函数实现了SM3算法的主要逻辑。它首先对消息进行填充，然后将填充后的消息分成若干个512位的消息块，对每个消息块调用压缩函数计算哈希值。最后，将得到的8个32位整数转换成字节数组。
sm3_digest函数是一个简单的包装函数，它将输入的字符串转换为字节数组并调用sm3_hash函数计算哈希值。然后，它将哈希值转换为16进制字符串表示形式。
在main函数中，定义了一个原始消息和一个附加消息，并指定了一个预期的哈希值。

攻击未成功的原因是由于代码实现的SM3哈希算法安全性较高，具有防碰撞和抗预映射等特性。因此，未能通过构造附加消息来伪造出与预期哈希值相等的新哈希值。
